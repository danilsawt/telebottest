import nltk
import telebot
api_token = '5931451553:AAFxV9irXzz_lf0zhZYu6zWwyKSfGd3y1ZI'
bot = telebot.TeleBot(api_token)
@bot.message_handler(commands=['start'])
def start_message(message):
    text = "the increasing popularity of Internet of Everything (IoE), various emerging Internet applications have been bringing the explosive network traffic (Cisco, 2020). To meet the massive requirements of traffic transmission, Internet Service Provider (ISP) has been expanding the investment on the establishment of network infrastructure to guarantee a high-bandwidth and low-latency network. Meanwhile, there is an urgent requirement to develop the technologies on network management. Traffic Engineering (TE), as an efficient network management tool, dedicates to achieve load balancing and improves network performance by optimizing the traffic routing schemes (Mendiola et al., 2016). Therefore, the researches on TE have attracted wide attention. Software Defined Network (SDN) is an emerging network architecture that decouples control plane from data plane (Amin et al., 2018). In this novel architecture, there are two main components, i.e. SDN controller and SDN switches. The SDN controller in the control plane has a global view of the network status by collecting traffic information from SDN switches in the data plane. Thus, it can centrally manage fine-grained forwarding behaviors of flows through dispatching flow entries to SDN switches (Open Networking Fundation, 2012). Here, the flow refers to an aggregation of the traffic identified by the source-destination address pair. According to the OpenFlow protocol (McKeown et al., 2008), the SDN controller can flexibly split the aggregated flows and set the outgoing links of the split flows by modifying or adding flow entries in the SDN switches (Liu et al., 2014; Guo et al., 2019). Compared with shortest-path-based routing in traditional distributed routing protocols, e.g. Open Shortest Path First (OSPF) (Moyet al., 1998), SDN controller exhibits great potential in providing a more flexible, efficient and intelligent routing by customizing the forwarding rules for each flow. Because of the benefits brought by SDN, ISPs are increasingly expected to perform the transition from a legacy network to a SDN-enabled network. However, migrating a traditional distributed network to a fully SDN-enabled network encounters technical and economic challenges (Vissicchio and VanbeverOlivier, 2014), especially for large-scale networks. Specifically, the SDN hardware and software have not been fully tested, which raises concerns on the stability and reliability of SDN devices (Xu et al., 2017a). This means that upgrading the entire network infrastructure with customized SDN devices may bring potential risks of security and instability. Moreover, upgrading to a fully SDN deployed network will inevitably impose a huge capital expenditure in purchasing SDN devices. In order to mitigate those challenges, ISPs tend to incrementally deploy the SDN devices rather than upgrading the entire network at one time. Therefore, a hybrid SDN, partially deploying SDN switches in a traditional network, is generated (Xu et al., 2017a; Hong et al., 2016; Guo et al., 2014; Agarwal et al., 2013). The hybrid SDN, where traditional legacy routers and SDN switches coexist, not only has the robustness of traditional distributed networks, but also owns the flexibility of centralized SDN-enabled networks. In recent years, the hybrid SDN has become a prevailing network architecture. Moreover, the studies on TE in the hybrid SDN have attracted widespread attention from academia and industry (Sinha Haribabuet al., 2017). The routing schemes designed by the previous studies on TE are either traffic oblivious or centralized control. Specifically, on the one hand, in the OSPF protocol, shortest-path-based routing methods ignore the load balancing and utilization of the entire network when designing the routing schemes (Fortz and Thorup, 2000, 2002, 2004; EricssonMauricio et al., 2002; Wang et al., 2001; Sridharan et al., 2005). Moreover, those methods cannot make self-adaptive adjustments to the routing schemes when encountering the fluctuating traffic demands. On the other hand, many routing methods adopt a flexible centralized-routing manner to handle various traffic demands by dynamically determining the routing schemes (Xu et al., 2017a; Hong et al., 2016; Guo et al., 2014, 2017a; Agarwal et al., 2013; Tian et al., 2020). However, the determination of the dynamic routing often requires to centrally solve a large-scale optimization problem, which is time-consuming to obtain its solution. This causes the failure of these centralized-routing methods in responding to the traffic bursts promptly. Recent breakthrough of Reinforcement Learning (DRL) have promoted a tremendous progress in various fields, e.g. game playing (Xiang and Su, 2021), natural language processing (Sharma and Kaushik, 2017), automatic driving (Zhang et al., 2018), etc. As an essential branch of Machine Learning (ML), Reinforcement Learning (RL) attempt to solve decision-making problems through continuous learning by interacting with the environment in a trial and error manner. During the learning procedure, past experiences are generalized to new situations by learning an RL agent, which establishes a direct mapping from representations of the environment to the decision policies (Zhu et al., 2017). Once the mapping is established, the efficient decision policy can be determined rapidly. Moreover, the advent of Neural Networks (NN) enables massive data encoded in a compact and effective representation. The integration of RL and NN can better describe the complex scenarios and exhibit superior performance on realizing an adaptive and fast decision-making. The advantages of RL exhibit its great potentials to realize intelligent TE so that the dynamic traffic demands can be handled timely in the hybrid SDN. However, leveraging RL to adaptively optimize routing schemes in the hybrid SDN still faces challenges. Firstly, because of co-existence of legacy routers and SDN switches in the hybrid SDN, different routing constraints on the different devices should be considered when learning an RL agent. Specifically, traffic flows on legacy routers are forwarded to the next hop according to the routing table entries indicated by OSPF protocol. In order to enable a flexible traffic splitting, traffic flows on SDN switches are forwarded to the next hop according to the flow entries dispatched by SDN controllers. The routing constraints for the legacy routers and SDN switches are different, which poses a great challenge to design an effective RL-based approach to learn an RL agent. Secondly, the RL agent is gradually trained by repeatedly interacting with the environment. The flexibility of traffic flows on the SDN switches may cause unnecessary routing loops. Thus, a reasonable and correct emulation environment should be established for learning the RL agent. Thirdly, to achieve the intelligent and rapid generation of routing schemes, the design of the RL agent should be carefully considered to handle the dynamically-changing traffic demands promptly. In this paper, we mainly focus on TE in the hybrid SDN and propose a new RL-based method named ROAR (Routing OptimizAtion with Reinforcement learning) to conduct the routing optimization for achieving link load balancing in the hybrid SDN. Specifically, we first formulate the TE problem in the hybrid SDN as a math programming problem. Then, a hybrid SDN is constructed from a traditional distributed network by incrementally upgrading legacy routers with SDN switches and determining the link weights under the distributed routing protocols. After that, we design and train a traffic-splitting agent on a set of traffic demands and a constructed simulation environment offline. Here, the traffic-splitting agent learns the direct relationship between the network states and the traffic-splitting policies. Finally, the learnt traffic-splitting agent can intelligently and rapidly generate routing schemes when the traffic demand is changed in the hybrid SDN. To demonstrate the superiority of our proposed ROAR method, extensive evaluations and comparative experiments are conducted on various topologies and real traffic datasets. The main contributions of this paper can be summarized as follows:"
    block_size = 4096
    sentences = nltk.sent_tokenize(text)
    blocks = []
    current_block = ""
    for sentence in sentences:
        if len(current_block + sentence) < block_size:
            current_block += sentence
        else:
            blocks.append(current_block)
            current_block = sentence

    blocks.append(current_block)

    for block in blocks:
        bot.send_message(message.chat.id, text=block)

bot.polling()